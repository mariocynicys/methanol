%{
    #include <iostream>
    #include "lib.hpp"
    using namespace std;

    // Functions needed by yacc.
    extern int yylex();
    void yyerror(string e) { /* Shut yacc up */ }

    // Where the input is read from (file or stdin).
    extern FILE* yyin;
%}

%define api.value.type union
%token <bool> LOGICAL
%token <int> INTEGER
%token <double> DOUBLE
%token <char*> STRING
%token <char*> IDENTIFIER

%type <yytokentype> type
%type <struct Expression*> expr paren_expr function_invokation
%type <struct TypeList*> typed_parameter_list argument_list
%type <struct StringList*> parameter_list

%token ERROR
%token NOT AND OR
%token PLUS MINUS MULT DIV
%token EQ NE LT GT LTE GTE
%token PRINT IF ELSE WHILE FOR REPEAT UNTIL SWITCH CASE DEFAULT RETURN
%token INTEGER_TYPE_DECLARATION DOUBLE_TYPE_DECLARATION LOGICAL_TYPE_DECLARATION
%token STRING_TYPE_DECLARATION ENUM_TYPE_DECLARATION CONSTANT

%left AND OR
%left EQ NE LT GT LTE GTE
%left PLUS MINUS
%left MULT DIV
%right NOT

%nonassoc UMINUS
%nonassoc NOELSE
%nonassoc ELSE

%start program
%%
program: stmts                              { leave_scope(/* To trigger warning for unused variables in the global scope */); }
    ;

// Note: stmts can be empty.
stmts:
    | stmts stmt                            { log_symtable(); }
    ;

stmt:
      code_block
    | assignment ';'
    | declaration ';'
    | function_declaration
    | expr ';'
    // Note: We don't support type casting for return statements.
    | RETURN expr ';'               { validate_return_type($2); }
    // Print is intentionally ignored.
    | PRINT expr ';'
    | if_stmt
    | while_stmt
    | for_stmt
    | repeat_until_stmt
    | switch_stmt
    | ERROR                         { log_syntax }
    | ';'
    ;

code_block:
      '{' { enter_scope(); } stmts '}' { leave_scope(); }
    ;

assignment:
      IDENTIFIER '=' expr           { assign_expr_to_identifier($3, $1); }
    ;

type:
      INTEGER_TYPE_DECLARATION      { $$ = INTEGER; }
    | DOUBLE_TYPE_DECLARATION       { $$ = DOUBLE; }
    | LOGICAL_TYPE_DECLARATION      { $$ = LOGICAL; }
    | STRING_TYPE_DECLARATION       { $$ = STRING; }
    ;

declaration:
      type IDENTIFIER                                           { declare_identifier(var_identifier($2, $1)); }
    | type IDENTIFIER '=' expr                                  { declare_identifier(var_identifier($2, $1)); assign_expr_to_identifier($4, $2); }
    // Note: A constant has to be assinged a value at declaration.
    | CONSTANT type IDENTIFIER '=' expr                         { declare_identifier(const_var_identifier($3, $2, $5->get_value())); }
    | ENUM_TYPE_DECLARATION IDENTIFIER '[' parameter_list ']'   { declare_identifier(enum_typ_identifier($2, $4)); }
    // Declaration of an enum variables.
    // Note: We don't suppport enums being consts.
    | IDENTIFIER IDENTIFIER                                     { declare_identifier(enum_var_identifier($2, $1)); }
    | IDENTIFIER IDENTIFIER '=' expr                            { declare_identifier(enum_var_identifier($2, $1)); assign_expr_to_identifier($4, $2); }
    ;

parameter_list:
      parameter_list ',' IDENTIFIER     { $$ = $1->append($3); }
    | IDENTIFIER                        { $$ = new StringList($1); }
    ;

function_declaration:
      // Note: We are creating a new scope for the function parameters.
      // Note: We don't support functions returning enums.
      type IDENTIFIER { push_func_ret_type($1); enter_scope(); } '(' typed_parameter_list ')' code_block { leave_scope(); }           { declare_identifier(func_identifier($2, $1, $5)); check_return_included($2); }
    ;

typed_parameter_list:
      typed_parameter_list ',' type IDENTIFIER      { $$ = $1->append($3); declare_identifier(func_param_identifier($4, $3)); }
    | type IDENTIFIER                               { $$ = new TypeList($1); declare_identifier(func_param_identifier($2, $1)); }
    |                                               { $$ = new TypeList(); }
    ;

expr:
      IDENTIFIER                { $$ = get_expr_for_variable($1); }
    | INTEGER                   { $$ = new Expression(INTEGER, true, Value($1)); }
    | DOUBLE                    { $$ = new Expression(DOUBLE, true, Value($1)); }
    | LOGICAL                   { $$ = new Expression(LOGICAL, true, Value($1)); }
    | STRING                    { $$ = new Expression(STRING, true, Value($1)); }
    // For enum expressions.
    | IDENTIFIER '.' IDENTIFIER { check_enum_contains_variant($1, $3); $$ = new Expression($1); }
    | function_invokation       { $$ = $1; }
    | paren_expr                { $$ = $1; }
    // The next set for expressions should operate only on numbers.
    | MINUS expr %prec UMINUS   { $$ = $2->neg(); }
    | expr PLUS expr            { $$ = $1->oper($3, PLUS); }
    | expr MINUS expr           { $$ = $1->oper($3, MINUS); }
    | expr MULT expr            { $$ = $1->oper($3, MULT); }
    | expr DIV expr             { $$ = $1->oper($3, DIV); }
    | expr LT expr              { $$ = $1->oper($3, LT); }
    | expr GT expr              { $$ = $1->oper($3, GT); }
    | expr LTE expr             { $$ = $1->oper($3, LTE); }
    | expr GTE expr             { $$ = $1->oper($3, GTE); }
    // The next set for expressions should operate on numbers and strings.
    | expr EQ expr              { $$ = $1->oper($3, EQ); }
    | expr NE expr              { $$ = $1->oper($3, NE); }
    // The next set for expressions should operate only on logicals.
    | expr AND expr             { $$ = $1->oper($3, AND); }
    | expr OR expr              { $$ = $1->oper($3, OR); }
    | NOT expr                  { $$ = $2->complement(); }
    ;

function_invokation:
      IDENTIFIER '(' argument_list ')'      { $$ = get_expr_for_func_invocation($1, $3); }
    ;

argument_list:
      argument_list ',' expr                { $$ = $1->append($3->type); }
    | expr                                  { $$ = new TypeList($1->type); }
    |                                       { $$ = new TypeList(); }
    ;

paren_expr:
      '(' expr ')'                          { $$ = $2; }
    ;

if_stmt:
      IF paren_expr code_block %prec NOELSE               { $2->warn_const_cond("If"); }
    | IF paren_expr code_block ELSE code_block            { $2->warn_const_cond("If"); }
    ;

while_stmt:
      WHILE paren_expr code_block                         { $2->warn_const_cond("While"); }
    ;

for_stmt:
    // Note: We are creating a new scope here for the (optional) loop variable
    // so it doesn't conflict with variables from the parent scope.
      FOR { enter_scope(); } '(' optional_declaration ';' expr { $6->warn_const_cond("For"); } ';' optional_assignment ')'
      code_block { leave_scope(); }
    ;

optional_declaration:
    | declaration
    ;

optional_assignment:
    | assignment
    ;

repeat_until_stmt:
      REPEAT code_block UNTIL paren_expr ';'                { $4->warn_const_cond("Repeat-until"); }
    ;

switch_stmt:
    // Note: A switch statement has to have atleast one CASE branch.
      SWITCH paren_expr                                     { push_switch_type($2->type); }
      '{' switch_branches switch_default_branch '}'         { $2->warn_const_switch(); pop_switch_type(); }
    ;

switch_branches:
      switch_branches switch_case_branch
    | switch_case_branch
    ;

switch_case_branch:
    // Note: We don't support type casting for switch case braches.
      CASE expr ':' code_block                              { validate_case_type($2); }
    ;

// Note: there might be no default branch.
switch_default_branch:
    | DEFAULT ':' code_block
    ;
%%

int main(int argc, char** argv) {
    // Handle input and output files.
    yyin = fopen(argv[1], "r");
    fout = argv[1];
    symlog.open(fout + ".sym");
    quadout.open(fout + ".quad");

    // Handle syntax errors.
    if (yyparse()) log_syntax;
    if (syntax_errors) {
        cerr << "Found " << syntax_errors <<" syntax error(s)" <<endl;
        abort();
    }

    // Semantic errors are checked for while parsing.
    return 0;
}